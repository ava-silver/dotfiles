#!/usr/bin/env zsh

#  -------------------------------GENERAL----------------------------------
alias cp='cp -riv'                          # Preferred 'cp' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias less='less -FSRXc'                    # Preferred 'less' implementation
alias wget='wget -c'
alias cat=bat                               # Preferred 'cat' implementation
alias ccat='\cat'                           # In case regular cat usage is preferred
alias top=btm                               # Preferred 'top' implementation
alias c=clear
alias cd=z
alias src='source /Users/ava.silver/.zshrc'
alias g=git
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
alias fix_term='echo -e "\033c"'            # fix_term:     Reset the conosle.  Similar to the reset command
alias qfind='find . -iname'                 # qfind:    Quickly search for file
alias zip='zip -r'
alias rm=rip
alias rrm='/bin/rm -rf'

#  -------------------------------LS----------------------------------
# Directory Listing aliases
alias ls=lsd                    # Preferred ls implementation
alias l=ls                      # short listing, all files
alias l.='ls -d .*'             # short listing, only hidden files - .*
alias la='ls -A'                # show hidden files
alias ll='ls -lAh'              # long
alias L='ls -lathF'             # long, sort by oldest to newest
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'



alias celeste="cd '/Users/ava.silver/Library/Application Support/Celeste'"


#  -------------------------------MISC----------------------------------
alias urldecode='sed "s@+@ @g;s@%@\\\\x@g" | xargs -0 printf "%b"'
alias xclip="pbcopy"

alias brewi="brew update && brew install"
alias brewr="brew uninstall"
alias brewu="brew upgrade"

#  -------------------------------devc---------------------------------
alias ds="devc start"
alias dsh="devc shell"
alias dx="devc stop"
alias dr="devc stop && devc start"
alias d="devc status"
alias pc='devc pre_commit'

#  -------------------------------K8s----------------------------------
alias kgp="k get pod"
alias kbash="kbash --pod"
alias ksh='kubectl exec --namespace azure-integrations deploy/azure-workers-main-azure-metrics-01 -c delancie-worker -it -- /bin/bash'
alias k=kubectl
alias ktx="/Users/ava.silver/dd/eclair-scripts/kubectx-switcher"
alias psql="/Users/ava.silver/dd/eclair-scripts/psql"
alias kns=kubens
alias kdev="kubectx devenv-avasilver"
alias kedit="k edit wpa"
alias kscale="chart=\$(gum choose --header='Choose a chart' azure-workers-main-azure-metrics-01 azure-workers-main-azure-meta); [ ! -z \$chart ] && kedit \$chart"
alias kscale-metric="kedit azure-workers-main-azure-metrics-01"
alias kscale-meta="kedit azure-workers-main-azure-meta"




# dogweb
alias format="git diff HEAD --name-only | xargs black"
alias autoflake="autoflake --remove-unused-variables --remove-all-unused-imports --in-place"
fix() {
    cmp="${1:-HEAD}"
    g dn $cmp | xargs sh -c 'black $@ ; autoflake --in-place --verbose --remove-unused-variables --remove-all-unused-imports $@; echo autoflake done!'
}

python() {
    if [[ $# == 0 ]]
    then
        ipython
    else
        python3 $@
    fi
}

export HOTDOG_USER='ava'

hotdog() {
  queue-group() {
    case $1 in
      meta)
        echo "azure-meta"
        ;;
      metrics)
        echo "azure-metrics"
        ;;
      *)
        echo 'azure-meta
azure-metrics' | gum filter --header="Choose a queue group:"  --height=3 --placeholder="Search..."
        ;;
    esac
  }
  announce() {
    gum style --border="rounded" --align center --margin="0 20" --padding="2 2" \
      --width=40 --bold --foreground 2 $1
  }
  if [[ $# == 0 ]]; then
    hotdog-cli
  elif [[ $1 == "sync" ]]; then
    if [[ $# == 1 ]]; then
      ## parse ~/hotdog.yml for key using yq
      key=`yq '.services[0].key' ~/hotdog.yml`
      hotdog-cli sync -k $key
      announce "Synced $key"
    elif [[ $# == 2 ]]; then
      hotdog-cli sync -k "queue-group:$(queue-group $2)"
      announce "Synced $2"
    else
      gum style --bold --foreground 1 "Usage: hotdog sync [key]"
      return 1
    fi
  elif [[ $1 == "pod" ]]; then
    kubectx stripe.us1.staging.dog
    group=`queue-group $2`
    if [[ -z $group ]]; then
      gum style --bold --foreground 1 "No queue group selected"
      return 1
    fi
    announce "Kbashing into pod for $group"
    kubectl exec --namespace azure-integrations \
      "deploy/azure-workers-hotdog-$group-$HOTDOG_USER" \
      -c delancie-worker -it -- /bin/bash
  else
    hotdog-cli $@
  fi
}

pr() {
  sed "s/TODO/$($HOME/.dotfiles/ticket.sh)/" ~/dogweb_pr.md | xclip
  gh pr create
}
# store token function

store_token() {
  printf "Enter env var name (e.g. FOOBAR_TOKEN): " && \
    read TOKEN_NAME && \
    printf "Enter API token value: " && \
    read TOKEN && \
    security add-generic-password -U -a ${USER} -s ${TOKEN_NAME} -w ${TOKEN} && \
    unset TOKEN

  TO_WRITE="\nexport ${TOKEN_NAME}="
  TO_WRITE+='$(security find-generic-password -a ${USER}'
  TO_WRITE+=" -s ${TOKEN_NAME} -w)"
  echo -e "${TO_WRITE}" >> ~/.zshrc
  unset TOKEN_NAME
  source ~/.zshrc
}

fix_devkube() {
  docker stop $(docker ps -aq)
  docker system prune -a
  tiltup delancie-crawler-azure
}
